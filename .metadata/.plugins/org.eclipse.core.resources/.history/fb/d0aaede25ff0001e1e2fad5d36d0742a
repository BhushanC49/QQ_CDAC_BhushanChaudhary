package com.app.my_translator_project;

import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.translate.v2.Translate;
import com.google.cloud.translate.v2.TranslateOptions;
import com.google.cloud.translate.v2.Translation;
import org.apache.commons.csv.CSVPrinter;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.text.PDFTextStripper;

import java.awt.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class MarathiToEnglishTranslator {

    private static final String[] ROW_NUMBERS = {"4", "7", "8"};

    public static void main(String[] args) throws IOException {
        // Load the PDF file
        PDDocument document = PDDocument.load(new File("path/to/marathi.pdf"));

        // Extract text from the PDF
        PDFTextStripper stripper = new PDFTextStripper();
        String text = stripper.getText(document);

        // Translate the relevant rows
        List<String> translatedRows = translateRows(text);

        // Save the translated rows to a CSV file
        saveToCSV(translatedRows);

        // Close the PDF document
        document.close();
    }

    private static List<String> translateRows(String text) throws IOException {
        List<String> rows = extractRows(text);

        Translate translate = TranslateOptions.getDefaultInstance().getService();

        List<String> translatedRows = new ArrayList<>();
        for (String row : rows) {
            String translatedText = translateText(translate, row);
            translatedRows.add(translatedText);
        }

        return translatedRows;
    }

    private static List<String> extractRows(String text) {
        List<String> rows = new ArrayList<>();

        for (String line : text.split("\n")) {
            for (String rowNumber : ROW_NUMBERS) {
                if (line.contains("(" + rowNumber + ")")) {
                    rows.add(line);
                }
            }
        }

        return rows;
    }

    private static String translateText(Translate translate, String text) throws IOException {
        Translation translation = translate.translate(text,
                TranslateOptions.newBuilder().setSourceLanguage("mr").setTargetLanguage("en").build());

        return translation.getTranslatedText();
    }

    private static void saveToCSV(List<String> rows) throws IOException {
        try (FileWriter writer = new FileWriter("translated_rows.csv");
             CSVPrinter csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT)) {

            for (String row : rows) {
> translatedRows) throws IOException {
        try (CSVPrinter                csvPrinter.printRecord(row);
 printer = new CSVPrinter(new FileWriter("            }

            Systemtranslated.out.println("Translation saved to translated_rows.csv");
_rows.csv"),
                CSVFormat.DEFAULT.withHeader("Row", "Translation        }
    }
}
